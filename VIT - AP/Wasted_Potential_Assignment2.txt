#include <iostream>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <chrono>

using namespace std::chrono;

__global__
void calcgpu(double *a, double *b, double *v, int n) {
  
   __shared__ double c[256];
  
  int index = threadIdx.x + blockIdx.x * blockDim.x;
  int stride = blockDim.x * gridDim.x;
  int cindex = threadIdx.x;
  double temp = 0;

  for(int i = index; i < n; i += stride)
    temp += a[i]*b[i];
  
  c[cindex] = temp;
  __syncthreads();
  int i  = blockDim.x/2;
  
  while(i > 0)
  {
    if(cindex < i)
      c[cindex] += c[cindex + i];
    __syncthreads();
    i/=2;
  }

  if(cindex == 0)   
    atomicAdd(v, c[0]);
}

void calcser(double *a, double *b, double *v, int n)
{
  for(int i = 0; i < n; i++)
    v[0] += a[i]*b[i];
  return;
}

int main(const int argc, const char** argv) {

  int n = 100000;
  
  int deviceId, numberOfSMs;
  size_t threadsPerBlock, numberOfBlocks;
    
  cudaGetDevice(&deviceId);
  cudaDeviceGetAttribute(&numberOfSMs, cudaDevAttrMultiProcessorCount, deviceId);
  
  threadsPerBlock = 256;
  numberOfBlocks = 32 * numberOfSMs;

  int bytes = n * sizeof(double);
  double *a, *b, *v, *y;
 
  cudaMallocManaged(&a, bytes);
  cudaMallocManaged(&b, bytes);
  cudaMallocManaged(&v, sizeof(double));
  cudaMallocManaged(&y, sizeof(double));
  
  v[0] = y[0] = 0;
  
  for(int i = 0; i < n; i++)
  {
    a[i] = b[i] = i + 1;
    y[0] += a[i]*b[i];
  }
  
  cudaMemPrefetchAsync(a, bytes, deviceId);
  cudaMemPrefetchAsync(b, bytes, deviceId);
  cudaMemPrefetchAsync(v, sizeof(double), deviceId);
  
  calcgpu<<<numberOfBlocks, threadsPerBlock>>>(a, b, v, n);
  cudaDeviceSynchronize();
  
  cudaMemPrefetchAsync(v, sizeof(double), cudaCpuDeviceId);
  
  //calcser(a, b, v, n); 
  
  if(y[0] == v[0])
    printf("Correct\n");
  else
    printf("Wrong\n");

  cudaFree(a);
  cudaFree(b);
  cudaFree(v);
  cudaFree(y);
}