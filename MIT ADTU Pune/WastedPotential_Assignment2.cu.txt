#include <iostream>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <chrono>

using namespace std::chrono;

__global__
void minmaxGPU(int *a, int *v, int *y, int n) {
  
   __shared__ int cmin[256], cmax[256];
  
  int index = threadIdx.x + blockIdx.x * blockDim.x;
  int stride = blockDim.x * gridDim.x;
  int cindex = threadIdx.x;
  double tmin = 100000000, tmax = -1;
  
  for(int i = index; i < n; i += stride)
  {
    if(a[i] < tmin)
      tmin = a[i];
    if(a[i] > tmax)
      tmax = a[i];
  }
  
  cmin[cindex] = tmin;
  cmax[cindex] = tmax;
  __syncthreads();
  int i  = blockDim.x/2;
  
  while(i > 0)
  {
    if(cindex < i)
    {  
      if(cmin[cindex] > cmin[cindex + i])
        cmin[cindex] = cmin[cindex + i];
      if(cmax[cindex] < cmax[cindex + i])
        cmax[cindex] = cmax[cindex + i];
    }
    __syncthreads();
    i/=2;
  }

  if(cindex == 0)   
  {  
    atomicMin(v, cmin[0]);
    atomicMax(y, cmax[0]);
  }
}

void minmaxCPU(int *a, int *v, int *y, int n)
{
  v[0] = v[0] = a[0];
  for(int i = 1; i < n; i++)
  {
    if(a[i] < v[0])
      v[0] = a[i];
    if(a[i] > y[0])
      y[0] = a[i];
  }
  return;
}

bool validate(int *a, int *b, int *c, int *d)
{
  return (a[0] == c[0]) && (b[0] == d[0]);
}

int main(const int argc, const char** argv) {

  int n = 1000000;
  
  int deviceId, numberOfSMs;
  size_t threadsPerBlock, numberOfBlocks;
    
  cudaGetDevice(&deviceId);
  cudaDeviceGetAttribute(&numberOfSMs, cudaDevAttrMultiProcessorCount, deviceId);
  
  threadsPerBlock = 256;
  numberOfBlocks = 32 * numberOfSMs;

  int bytes = n * sizeof(int);
  int *a, *vg, *yg, *vc, *yc;
 
  cudaMallocManaged(&a, bytes);
  cudaMallocManaged(&vg, sizeof(int));
  cudaMallocManaged(&yg, sizeof(int));
  cudaMallocManaged(&vc, sizeof(int));
  cudaMallocManaged(&yc, sizeof(int));
  
  vg[0] = vc[0] = 99999999;
  yg[0] = yc[0] = -1;
  
  for(int i = 0; i < n; i++)
    a[i] = i + 1;
  
  cudaMemPrefetchAsync(a, bytes, deviceId);
  cudaMemPrefetchAsync(vg, sizeof(int), deviceId);
  cudaMemPrefetchAsync(yg, sizeof(int), deviceId);
  
  minmaxGPU<<<numberOfBlocks, threadsPerBlock>>>(a, vg, yg, n);
  cudaDeviceSynchronize();
  
  auto start = high_resolution_clock::now();
  
  cudaMemPrefetchAsync(vc, sizeof(int), cudaCpuDeviceId);
  cudaMemPrefetchAsync(yc, sizeof(int), cudaCpuDeviceId);
  
  minmaxCPU(a, vc, yc, n); 
  
  auto stop = high_resolution_clock::now();
  auto t = duration_cast<nanoseconds>(stop - start);
 
  std::cout << "Time taken by CPU: " << t.count() << " nanoseconds" << "\n";
  
  if(validate(vg, yg, vc, yc))
    printf("Correct\n");
  else 
    printf("Wrong\n");

  cudaFree(a);
  cudaFree(vg);
  cudaFree(yg);
  cudaFree(vc);
  cudaFree(yc);
}